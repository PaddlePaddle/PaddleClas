PROJECT(cls_lib CXX C)
CMAKE_MINIMUM_REQUIRED(VERSION 3.14)

OPTION(CMP_STATIC "Whether compile static library. Default by True." ON)

MESSAGE(STATUS "Building config library and cls library.")

IF(NOT DEFINED OpenCV_DIR)
  MESSAGE(FATAL_ERROR "Please SET OpenCV_DIR with -DOpenCV_DIR=/path/opencv")
ENDIF()

IF(NOT DEFINED PADDLE_LIB)
  MESSAGE(FATAL_ERROR "Please SET PADDLE_LIB with -DPADDLE_LIB=/path/paddle/lib")
ENDIF()

FIND_PACKAGE(OpenCV REQUIRED)
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
INCLUDE_DIRECTORIES("${PADDLE_LIB}/paddle/include")

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)

SET(CONFIG_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/cls_config.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/utility.cpp)
SET(CLS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/cls.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/preprocess_op.cpp)

SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR})
IF(CMP_STATIC)
  ADD_LIBRARY(config STATIC ${CONFIG_SRC})
  ADD_LIBRARY(cls STATIC ${CLS_SRC})
ELSE()
  ADD_LIBRARY(config SHARED ${CONFIG_SRC})
  ADD_LIBRARY(cls SHARED ${CLS_SRC})
ENDIF()

TARGET_LINK_LIBRARIES(config)
TARGET_LINK_LIBRARIES(cls ${OpenCV_LIBS})
